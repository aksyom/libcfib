_bin = []
_lib = []
Import('*')
env = root_env.Clone()
env.Append(CPPDEFINES = '_WITH_SYSAPI_' + config_system_API)

nasm_env = env.Clone();
nasm_env.Append(BUILDERS = {'NASMObject' : Builder(action = 'nasm -f $NASM_FORMAT $NASM_FLAGS -o $TARGET $SOURCE')})
if config_system_ABI == 'sysv-amd64':
    nasm_suffix = '-sysv-amd64'
    nasm_env['NASM_FORMAT'] = 'elf64'
else:
    print "ERROR: Unsupported System ABI: " + config_system_ABI
    Exit(1)
nasm_shared_obj = nasm_env.NASMObject('cfib' + nasm_suffix + '.os', 'cfib' + nasm_suffix + '.asm', NASM_FLAGS='-D _ELF_SHARED=1')
nasm_static_obj = nasm_env.NASMObject('cfib' + nasm_suffix + '.o', 'cfib' + nasm_suffix + '.asm')
if config_have_c11_atomics:
    env.Append(CPPDEFINES = '_WITH_C11_ATOMICS')
env.Append(LIBPATH = ['.'])
variants = [('', '')]
if config_have_c11_thread_local:
    variants += [('-D_WITH_C11_THREAD_LOCAL', '_C11')]
for variant_cflags, variant_suffix in variants:
    e = env.Clone()
    e.Append(CCFLAGS = [variant_cflags])
    shared_objects = [e.SharedObject('cfib' + variant_suffix, 'cfib.c'), nasm_shared_obj]
    static_objects = [e.StaticObject('cfib' + variant_suffix, 'cfib.c'), nasm_static_obj]
    _lib += [e.SharedLibrary(target = 'cfib' + variant_suffix, source = shared_objects)]
    _lib += [e.StaticLibrary(target = 'cfib' + variant_suffix + '_static', source = static_objects)]
    e_shared = e.Clone()
    e_static = e.Clone()
    e_shared.Append(LIBS = ['cfib' + variant_suffix])
    e_static.Append(LIBS = ['cfib' + variant_suffix + '_static'])
    test_obj = e.Object('test_cfib' + variant_suffix, 'test_cfib.c')
    bench_obj = e.Object('benchmark_cfib' + variant_suffix, 'benchmark_cfib.c')
    prof_obj = e.Object('test_cfib_profiler' + variant_suffix, 'test_cfib_profiler.c')
    _bin += [e_shared.Program(target = 'test_cfib' + variant_suffix, source = [test_obj])]
    _bin += [e_static.Program(target = 'test_cfib' + variant_suffix + '_static', source = [test_obj])]
    _bin += [e_static.Program(target = 'benchmark_cfib' + variant_suffix, source = [bench_obj])]
    _bin += [e_static.Program(target = 'test_cfib_profiler' + variant_suffix, source = [prof_obj])]

_ret = {'test_bin': _bin, 'lib': _lib}
Return('_ret')
