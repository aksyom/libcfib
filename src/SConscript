_bin = []
_lib = []
Import('*')
env = root_env.Clone(tools = ['default', 'nasm'])
env.Append(CPPDEFINES = '_WITH_SYSAPI_' + config_system_API)

#nasm_env = env.Clone();
#nasm_env.Append(BUILDERS = {'NASMObject' : Builder(action = 'nasm -f $NASM_FORMAT $NASM_FLAGS -o $TARGET $SOURCE')})
if config_system_ABI == 'sysv-amd64':
    nasm_suffix = '-sysv-amd64'
    nasm_static_flags = '-g -f elf64'
    nasm_shared_flags = '-g -f elf64 -D _ELF_SHARED=1'
else:
    print "ERROR: Unsupported System ABI: " + config_system_ABI
    Exit(1)
nasm_static = env.Clone();
nasm_shared = env.Clone();
nasm_static.Append(ASFLAGS = nasm_static_flags)
nasm_shared.Append(ASFLAGS = nasm_shared_flags)
nasm_shared_obj = nasm_shared.SharedObject('cfib' + nasm_suffix + '.asm')
nasm_static_obj = nasm_static.StaticObject('cfib' + nasm_suffix + '.asm')

if config_have_c11_atomics:
    env.Append(CPPDEFINES = '_WITH_C11_ATOMICS')

env.Append(LIBPATH = ['.'])
lib_variants = [('', '')]

if config_have_c11_atomics:
    lib_variants += [('-D_PROFILED_BUILD', '_profiled')]
    have_profiled_libs = True
else:
    print "Compiler does not support C11 _Atomic, skipping profiler build."

for cppdefs, suffix in lib_variants:
    var_env = env.Clone()
    var_env.Append(CPPDEFINES = [cppdefs])
    shared_objects = [var_env.SharedObject('cfib' + suffix, 'cfib.c'), nasm_shared_obj]
    static_objects = [var_env.StaticObject('cfib' + suffix, 'cfib.c'), nasm_static_obj]
    _lib += [var_env.SharedLibrary(target = 'cfib' + suffix, source = shared_objects)]
    _lib += [var_env.StaticLibrary(target = 'cfib' + suffix + '_static', source = static_objects)]

shared = env.Clone()
static = env.Clone()
profiled = env.Clone()
shared.Append(LIBS = ['cfib'])
static.Append(LIBS = ['cfib_static'])
profiled.Append(LIBS = ['cfib_profiled'])
test_obj = env.Object('test_cfib' + suffix, 'test_cfib.c')
_bin += [shared.Program(target = 'test_cfib', source = [test_obj])]
_bin += [static.Program(target = 'test_cfib_static', source = [test_obj])]
_bin += [profiled.Program(target = 'test_cfib_profiled', source = [test_obj])]

_ret = {'test_bin': _bin, 'lib': _lib}
Return('_ret')
